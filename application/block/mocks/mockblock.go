// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jamestunnell/go-musicality/application/block (interfaces: Block)

// Package mock_block is a generated GoMock package.
package mock_block

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	block "github.com/jamestunnell/go-musicality/application/block"
)

// MockBlock is a mock of Block interface.
type MockBlock struct {
	ctrl     *gomock.Controller
	recorder *MockBlockMockRecorder
}

// MockBlockMockRecorder is the mock recorder for MockBlock.
type MockBlockMockRecorder struct {
	mock *MockBlock
}

// NewMockBlock creates a new mock instance.
func NewMockBlock(ctrl *gomock.Controller) *MockBlock {
	mock := &MockBlock{ctrl: ctrl}
	mock.recorder = &MockBlockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlock) EXPECT() *MockBlockMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockBlock) Configure() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Configure")
}

// Configure indicates an expected call of Configure.
func (mr *MockBlockMockRecorder) Configure() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockBlock)(nil).Configure))
}

// Initialize mocks base method.
func (m *MockBlock) Initialize() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize")
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockBlockMockRecorder) Initialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockBlock)(nil).Initialize))
}

// Params mocks base method.
func (m *MockBlock) Params() map[string]*block.Param {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Params")
	ret0, _ := ret[0].(map[string]*block.Param)
	return ret0
}

// Params indicates an expected call of Params.
func (mr *MockBlockMockRecorder) Params() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockBlock)(nil).Params))
}

// Ports mocks base method.
func (m *MockBlock) Ports() map[string]*block.Port {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ports")
	ret0, _ := ret[0].(map[string]*block.Port)
	return ret0
}

// Ports indicates an expected call of Ports.
func (mr *MockBlockMockRecorder) Ports() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ports", reflect.TypeOf((*MockBlock)(nil).Ports))
}

// Process mocks base method.
func (m *MockBlock) Process() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Process")
}

// Process indicates an expected call of Process.
func (mr *MockBlockMockRecorder) Process() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockBlock)(nil).Process))
}
